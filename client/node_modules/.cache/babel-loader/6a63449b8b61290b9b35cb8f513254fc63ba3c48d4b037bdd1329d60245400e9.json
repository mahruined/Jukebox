{"ast":null,"code":"var _jsxFileName = \"C:\\\\school\\\\SPA\\\\ERMM-musicplayer\\\\Jukebox\\\\musicplayer\\\\src\\\\components\\\\MainPage\\\\test.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Profile component to display each Test\nconst Profile = ({\n  Test,\n  image\n}) => {\n  console.log(\"Image Path:\", image); // Log the image path to ensure it's correct\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: Test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: Test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n};\n\n// Test component to fetch and display Tests\n_c = Profile;\nexport default function Test() {\n  _s();\n  const [Tests, setTests] = useState([]); // State to store Tests data\n  const [loading, setLoading] = useState(true); // State to handle loading\n  const [error, setError] = useState(null); // State to handle error\n\n  // Fetch Tests from the backend\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/test').then(response => {\n      console.log(\"Tests data fetched successfully\", response.data); // Log when data is successfully fetched\n      setTests(response.data); // Set the Tests data in the state\n      setLoading(false); // Set loading to false when data is fetched\n    }).catch(error => {\n      console.error('Error fetching Tests:', error); // Log any errors that occur during the fetch\n      setError('Failed to fetch Tests'); // Set error state\n      setLoading(false);\n    });\n  }, []); // Empty dependency array to run the effect once when the component mounts\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading Tests...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this); // Display the error message\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Tests\",\n      children: Tests.map((test, index) => /*#__PURE__*/_jsxDEV(Profile, {\n        Test: test.name,\n        image: `http://localhost:3000${test.img}` // Ensure the image path is full\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Test, \"Q6L6YSjlJVIcbJ7gaLTcMjprJMc=\");\n_c2 = Test;\nvar _c, _c2;\n$RefreshReg$(_c, \"Profile\");\n$RefreshReg$(_c2, \"Test\");","map":{"version":3,"names":["Profile","Test","image","console","log","_jsxDEV","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","Tests","setTests","useState","loading","setLoading","error","setError","useEffect","axios","get","then","response","data","catch","map","test","index","name","img","_c2","$RefreshReg$"],"sources":["C:/school/SPA/ERMM-musicplayer/Jukebox/musicplayer/src/components/MainPage/test.js"],"sourcesContent":["// Profile component to display each Test\r\nconst Profile = ({ Test, image }) => {\r\n  console.log(\"Image Path:\", image);  // Log the image path to ensure it's correct\r\n  return (\r\n    <div className=\"tests\">\r\n      <img src={image} alt={Test} />\r\n      <p>{Test}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Test component to fetch and display Tests\r\nexport default function Test() {\r\n  const [Tests, setTests] = useState([]); // State to store Tests data\r\n  const [loading, setLoading] = useState(true); // State to handle loading\r\n  const [error, setError] = useState(null); // State to handle error\r\n\r\n  // Fetch Tests from the backend\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3000/api/test')\r\n      .then((response) => {\r\n        console.log(\"Tests data fetched successfully\", response.data); // Log when data is successfully fetched\r\n        setTests(response.data); // Set the Tests data in the state\r\n        setLoading(false); // Set loading to false when data is fetched\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching Tests:', error); // Log any errors that occur during the fetch\r\n        setError('Failed to fetch Tests'); // Set error state\r\n        setLoading(false);\r\n      });\r\n  }, []); // Empty dependency array to run the effect once when the component mounts\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <p>Loading Tests...</p>\r\n        <div className=\"spinner\"></div> {/* Add CSS for a spinner */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  if (error) {\r\n    return <div>{error}</div>; // Display the error message\r\n  }\r\n  \r\n  return (\r\n    <section>\r\n      <h1>Tests</h1>\r\n      <div className=\"Tests\">\r\n        {Tests.map((test, index) => (\r\n          <Profile \r\n            key={index} \r\n            Test={test.name} \r\n            image={`http://localhost:3000${test.img}`} // Ensure the image path is full\r\n          />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}