{"ast":null,"code":"// Routes/artistsRoute.js\nconst express = require('express');\nconst router = express.Router();\nmodule.exports = db => {\n  // GET all artists\n  router.get('/', (req, res) => {\n    db.query('SELECT * FROM artists', (err, results) => {\n      if (err) return res.status(500).json({\n        error: 'Failed to fetch artists'\n      });\n      res.json(results);\n    });\n  });\n\n  // GET single artist by ID\n  router.get('/:id', (req, res) => {\n    const artistId = req.params.id;\n    db.query('SELECT * FROM artists WHERE id = ?', [artistId], (err, results) => {\n      if (err) return res.status(500).json({\n        error: 'Failed to fetch artist'\n      });\n      if (results.length === 0) return res.status(404).json({\n        error: 'Artist not found'\n      });\n      res.json(results[0]);\n    });\n  });\n\n  // POST new artist\n  router.post('/', (req, res) => {\n    const {\n      name,\n      image,\n      description\n    } = req.body;\n    db.query('INSERT INTO artists (name, image, description) VALUES (?, ?, ?)', [name, image, description], (err, result) => {\n      if (err) return res.status(500).json({\n        error: 'Failed to add artist'\n      });\n      res.status(201).json({\n        id: result.insertId,\n        name,\n        image,\n        description\n      });\n    });\n  });\n\n  // PUT update artist\n  router.put('/:id', (req, res) => {\n    const artistId = req.params.id;\n    const {\n      name,\n      image,\n      description\n    } = req.body;\n    db.query('UPDATE artists SET name = ?, image = ?, description = ? WHERE id = ?', [name, image, description, artistId], err => {\n      if (err) return res.status(500).json({\n        error: 'Failed to update artist'\n      });\n      res.status(200).json({\n        id: artistId,\n        name,\n        image,\n        description\n      });\n    });\n  });\n\n  // DELETE artist\n  router.delete('/:id', (req, res) => {\n    const artistId = req.params.id;\n    db.query('DELETE FROM artists WHERE id = ?', [artistId], err => {\n      if (err) return res.status(500).json({\n        error: 'Failed to delete artist'\n      });\n      res.status(204).send();\n    });\n  });\n  return router;\n};","map":{"version":3,"names":["express","require","router","Router","module","exports","db","get","req","res","query","err","results","status","json","error","artistId","params","id","length","post","name","image","description","body","result","insertId","put","delete","send"],"sources":["C:/school/SPA/ERMM-musicplayer/Jukebox/client/src/components/artistinfo/artistinfo.js"],"sourcesContent":["// Routes/artistsRoute.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\n\r\nmodule.exports = (db) => {\r\n  // GET all artists\r\n  router.get('/', (req, res) => {\r\n    db.query('SELECT * FROM artists', (err, results) => {\r\n      if (err) return res.status(500).json({ error: 'Failed to fetch artists' });\r\n      res.json(results);\r\n    });\r\n  });\r\n\r\n  // GET single artist by ID\r\n  router.get('/:id', (req, res) => {\r\n    const artistId = req.params.id;\r\n    db.query('SELECT * FROM artists WHERE id = ?', [artistId], (err, results) => {\r\n      if (err) return res.status(500).json({ error: 'Failed to fetch artist' });\r\n      if (results.length === 0) return res.status(404).json({ error: 'Artist not found' });\r\n      res.json(results[0]);\r\n    });\r\n  });\r\n\r\n  // POST new artist\r\n  router.post('/', (req, res) => {\r\n    const { name, image, description } = req.body;\r\n    db.query('INSERT INTO artists (name, image, description) VALUES (?, ?, ?)',\r\n      [name, image, description],\r\n      (err, result) => {\r\n        if (err) return res.status(500).json({ error: 'Failed to add artist' });\r\n        res.status(201).json({ id: result.insertId, name, image, description });\r\n      });\r\n  });\r\n\r\n  // PUT update artist\r\n  router.put('/:id', (req, res) => {\r\n    const artistId = req.params.id;\r\n    const { name, image, description } = req.body;\r\n    db.query('UPDATE artists SET name = ?, image = ?, description = ? WHERE id = ?',\r\n      [name, image, description, artistId],\r\n      (err) => {\r\n        if (err) return res.status(500).json({ error: 'Failed to update artist' });\r\n        res.status(200).json({ id: artistId, name, image, description });\r\n      });\r\n  });\r\n\r\n  // DELETE artist\r\n  router.delete('/:id', (req, res) => {\r\n    const artistId = req.params.id;\r\n    db.query('DELETE FROM artists WHERE id = ?', [artistId], (err) => {\r\n      if (err) return res.status(500).json({ error: 'Failed to delete artist' });\r\n      res.status(204).send();\r\n    });\r\n  });\r\n\r\n  return router;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}