{"ast":null,"code":"var _jsxFileName = \"C:\\\\school\\\\SPA\\\\ERMM-musicplayer\\\\Jukebox\\\\musicplayer\\\\src\\\\components\\\\MainPage\\\\test.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Style/HomePage.css';\n\n// Profile component to display each test\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Profile = ({\n  test,\n  image\n}) => {\n  console.log(\"Image Path:\", image); // Check the path of the image\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tests\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: image,\n      alt: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: test\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n// test component to fetch and display tests\n_c = Profile;\nexport default function test() {\n  _s();\n  const [tests, settests] = useState([]); // State to store tests data\n  const [loading, setLoading] = useState(true); // State to handle loading\n  const [error, setError] = useState(null); // State to handle error\n\n  // Fetch tests from the backend\n  useEffect(() => {\n    axios.get('http://localhost:3000/api/test').then(response => {\n      console.log(\"tests data fetched successfully\", response.data); // Log when data is successfully fetched\n      settests(response.data); // Set the tests data in the state\n      setLoading(false); // Set loading to false when data is fetched\n    }).catch(error => {\n      console.error('Error fetching tests:', error); // Log any errors that occur during the fetch\n      setError('Failed to fetch tests'); // Set error state\n      setLoading(false);\n    });\n  }, []); // Empty dependency array to run the effect once when the component mounts\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading tests...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 12\n    }, this); // Display the error message\n  }\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"tests\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tests\",\n      children: tests.map((test, index) => /*#__PURE__*/_jsxDEV(Profile, {\n        test: test.name,\n        image: test.image\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(test, \"cQ+ZKq2c4et0XA9XrQ1WMr9/ZhU=\");\nvar _c;\n$RefreshReg$(_c, \"Profile\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Profile","test","image","console","log","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","_s","tests","settests","loading","setLoading","error","setError","get","then","response","data","catch","map","index","name","$RefreshReg$"],"sources":["C:/school/SPA/ERMM-musicplayer/Jukebox/musicplayer/src/components/MainPage/test.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './Style/HomePage.css';\r\n\r\n// Profile component to display each test\r\nconst Profile = ({ test, image }) => {\r\n  console.log(\"Image Path:\", image);  // Check the path of the image\r\n  return (\r\n    <div className=\"tests\">\r\n      <img src={image} alt={test} />\r\n      <p>{test}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// test component to fetch and display tests\r\nexport default function test() {\r\n  const [tests, settests] = useState([]); // State to store tests data\r\n  const [loading, setLoading] = useState(true); // State to handle loading\r\n  const [error, setError] = useState(null); // State to handle error\r\n\r\n  // Fetch tests from the backend\r\n  useEffect(() => {\r\n    axios.get('http://localhost:3000/api/test')\r\n      .then((response) => {\r\n        console.log(\"tests data fetched successfully\", response.data); // Log when data is successfully fetched\r\n        settests(response.data); // Set the tests data in the state\r\n        setLoading(false); // Set loading to false when data is fetched\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching tests:', error); // Log any errors that occur during the fetch\r\n        setError('Failed to fetch tests'); // Set error state\r\n        setLoading(false);\r\n      });\r\n  }, []); // Empty dependency array to run the effect once when the component mounts\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loading-container\">\r\n        <p>Loading tests...</p>\r\n        <div className=\"spinner\"></div> {/* Add CSS for a spinner */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n  if (error) {\r\n    return <div>{error}</div>; // Display the error message\r\n  }\r\n  return (\r\n    <section>\r\n      <h1>tests</h1>\r\n      <div className=\"tests\">\r\n        {tests.map((test, index) => (\r\n          <Profile key={index} test={test.name} image={test.image} />\r\n        ))}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}